require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe WithdrawsController, type: :controller do
  fixtures :all

  # This should return the minimal set of attributes required to create a valid
  # Withdraw. As you add validations to Withdraw, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryGirl.build(:withdraw).attributes
  }

  let(:invalid_attributes) {
    { item_id: nil }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # WithdrawsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    describe "When logged in as Administrator" do
      login_fixture_admin
      it "assigns all withdraws as @withdraws" do
        withdraw = Withdraw.create! valid_attributes
        get :index, {}, valid_session
        expect(assigns(:withdraws)).to eq([withdraw])
      end
    end
  end

  describe "GET #show" do
    describe "When logged in as Administrator" do
      login_fixture_admin
      it "assigns the requested withdraw as @withdraw" do
        withdraw = Withdraw.create! valid_attributes
        get :show, {:id => withdraw.to_param}, valid_session
        expect(assigns(:withdraw)).to eq(withdraw)
        response.should be_success
      end
    end
  end

  describe "GET #new" do
    describe "When logged in as Administrator" do
      login_fixture_admin
      it "assigns a new withdraw as @withdraw" do
        get :new, {}, valid_session
        expect(assigns(:withdraw)).to be_a_new(Withdraw)
      end
    end
  end

  describe "GET #edit" do
    it "assigns the requested withdraw as @withdraw" do
      withdraw = Withdraw.create! valid_attributes
      get :edit, {:id => withdraw.to_param}, valid_session
      expect(assigns(:withdraw)).to eq(withdraw)
    end
  end

  describe "POST #create" do
    describe "When logged in as Administrator" do
      login_fixture_admin
      context "with valid params" do
        it "creates a new Withdraw" do
          expect {
            post :create, {:withdraw => valid_attributes}, valid_session
          }.to change(Withdraw, :count).by(1)
        end

        it "assigns a newly created withdraw as @withdraw" do
          post :create, {:withdraw => valid_attributes}, valid_session
          expect(assigns(:withdraw)).to be_a(Withdraw)
          expect(assigns(:withdraw)).to be_persisted
        end

        it "redirects to the created withdraw" do
          post :create, {:withdraw => valid_attributes}, valid_session
          expect(response).to redirect_to(Withdraw.last)
        end
      end

      context "with invalid params" do
        it "assigns a newly created but unsaved withdraw as @withdraw" do
          post :create, {:withdraw => invalid_attributes}, valid_session
          expect(assigns(:withdraw)).to be_a_new(Withdraw)
        end

        it "re-renders the 'new' template" do
          post :create, {:withdraw => invalid_attributes}, valid_session
          expect(response).to render_template("new")
        end
      end
    end
  end

  describe "PUT #update" do
    describe "When logged in as Administrator" do
      login_fixture_admin
      context "with valid params" do
        let(:new_attributes) {
          {item_id: FactoryGirl.create(:item).id}
        }

        it "updates the requested withdraw" do
          withdraw = Withdraw.create! valid_attributes
          put :update, {:id => withdraw.to_param, :withdraw => new_attributes}, valid_session
          withdraw.reload
          response.should redirect_to(assigns(:withdraw))
        end

        it "assigns the requested withdraw as @withdraw" do
          withdraw = Withdraw.create! valid_attributes
          put :update, {:id => withdraw.to_param, :withdraw => valid_attributes}, valid_session
          expect(assigns(:withdraw)).to eq(withdraw)
        end

        it "redirects to the withdraw" do
          withdraw = Withdraw.create! valid_attributes
          put :update, {:id => withdraw.to_param, :withdraw => valid_attributes}, valid_session
          expect(response).to redirect_to(withdraw)
        end
      end

      context "with invalid params" do
        it "assigns the withdraw as @withdraw" do
          withdraw = Withdraw.create! valid_attributes
          put :update, {:id => withdraw.to_param, :withdraw => invalid_attributes}, valid_session
          expect(assigns(:withdraw)).to eq(withdraw)
        end

        it "re-renders the 'edit' template" do
          withdraw = Withdraw.create! valid_attributes
          put :update, {:id => withdraw.to_param, :withdraw => invalid_attributes}, valid_session
          expect(response).to render_template("edit")
        end
      end
    end
  end

  describe "DELETE #destroy" do
    describe "When logged in as Administrator" do
      login_fixture_admin
      it "destroys the requested withdraw" do
        withdraw = Withdraw.create! valid_attributes
        expect {
          delete :destroy, {:id => withdraw.to_param}, valid_session
        }.to change(Withdraw, :count).by(-1)
      end

      it "redirects to the withdraws list" do
        withdraw = Withdraw.create! valid_attributes
        delete :destroy, {:id => withdraw.to_param}, valid_session
        expect(response).to redirect_to(withdraws_url)
      end
    end
  end

end
